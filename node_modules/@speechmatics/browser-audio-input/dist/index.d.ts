import { TypedEventTarget } from 'typescript-event-target';

interface AudioInputDevicesEventMap {
    changeDevices: Event;
    changePermissions: Event;
}
declare class AudioInputDevicesStore extends TypedEventTarget<AudioInputDevicesEventMap> {
    private _permissionState;
    private _devices;
    get permissionState(): PermissionState | 'prompting';
    set permissionState(value: PermissionState | 'prompting');
    get devices(): MediaDeviceInfo[];
    set devices(devices: MediaDeviceInfo[]);
    constructor();
    promptPermissions(): Promise<void>;
    private updateDeviceList;
}
declare function getAudioDevicesStore(): AudioInputDevicesStore;

declare const RECORDING_STARTED = "recordingStarted";
declare const RECORDING_STOPPED = "recordingStopped";
declare const AUDIO = "audio";
declare const MUTE = "mute";
declare const UNMUTE = "unmute";
declare class InputAudioEvent extends Event {
    readonly data: Float32Array;
    constructor(data: Float32Array);
}
declare class MuteEvent extends Event {
    constructor();
}
declare class UnmuteEvent extends Event {
    constructor();
}
interface PCMRecorderEventMap {
    [RECORDING_STARTED]: Event;
    [RECORDING_STOPPED]: Event;
    [AUDIO]: InputAudioEvent;
    [MUTE]: MuteEvent;
    [UNMUTE]: UnmuteEvent;
}
type StartRecordingOptions = {
    deviceId?: string;
    recordingOptions?: MediaTrackConstraints;
    audioContext: AudioContext;
};
declare class PCMRecorder extends TypedEventTarget<PCMRecorderEventMap> {
    readonly workletScriptURL: string;
    constructor(workletScriptURL: string);
    private mediaStream;
    private audioContext;
    private inputSourceNode;
    private _analyser;
    get analyser(): AnalyserNode | undefined;
    get isRecording(): boolean;
    startRecording(options: StartRecordingOptions): Promise<void>;
    mute(): void;
    unmute(): void;
    get isMuted(): boolean;
    stopRecording(): void;
}
declare class AudioModuleRegistrationError extends Error {
    constructor(moduleUrl: string, error: unknown);
}

export { AudioInputDevicesStore, AudioModuleRegistrationError, InputAudioEvent, MuteEvent, PCMRecorder, type StartRecordingOptions, UnmuteEvent, getAudioDevicesStore };
