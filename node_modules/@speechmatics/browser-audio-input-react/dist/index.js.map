{"version":3,"file":"index.js","sources":["../src/use-audio-devices.ts","../src/use-pcm-audio-recorder.tsx"],"sourcesContent":["import { useCallback, useSyncExternalStore } from 'react';\nimport { getAudioDevicesStore } from '@speechmatics/browser-audio-input';\n\n// Here we subscribe to the device state browser event\n// When devices change, the getDevices callback is invoked\nfunction subscribeDevices(callback: () => void) {\n  const audioDevices = getAudioDevicesStore();\n  audioDevices.addEventListener('changeDevices', callback);\n  return () => {\n    audioDevices.removeEventListener('changeDevices', callback);\n  };\n}\nconst getDevices = () => getAudioDevicesStore().devices;\n\nfunction useAudioDeviceList() {\n  return useSyncExternalStore(subscribeDevices, getDevices, getDevices);\n}\n\n// Here we subscribe to the user's provided permissions\n// When the permission state changes, the useAudioDevices hook is called\nfunction subscribePermissionState(callback: () => void) {\n  const audioDevices = getAudioDevicesStore();\n  audioDevices.addEventListener('changePermissions', callback);\n  return () => {\n    audioDevices.removeEventListener('changePermissions', callback);\n  };\n}\nconst getPermissionState = () => getAudioDevicesStore().permissionState;\nfunction useAudioPermissionState() {\n  return useSyncExternalStore(\n    subscribePermissionState,\n    getPermissionState,\n    getPermissionState,\n  );\n}\n\nfunction usePromptAudioPermission() {\n  return useCallback(async () => {\n    await getAudioDevicesStore().promptPermissions();\n  }, []);\n}\n\nexport type AudioDevices =\n  | { permissionState: 'prompt'; promptPermissions: () => void }\n  | { permissionState: 'prompting' }\n  | {\n      permissionState: 'granted';\n      deviceList: ReadonlyArray<MediaDeviceInfo>;\n    }\n  | { permissionState: 'denied' };\n\nexport function useAudioDevices(): AudioDevices {\n  const permissionState = useAudioPermissionState();\n  const promptPermissions = usePromptAudioPermission();\n  const deviceList = useAudioDeviceList();\n\n  switch (permissionState) {\n    case 'prompt':\n      return {\n        permissionState,\n        promptPermissions,\n      };\n    case 'granted':\n      return {\n        permissionState,\n        deviceList,\n      };\n    case 'prompting':\n    case 'denied':\n      return {\n        permissionState,\n      };\n    default:\n      permissionState satisfies never;\n      throw new Error(`Unexpected permission state: ${permissionState}`);\n  }\n}\n","import {\n  type InputAudioEvent,\n  PCMRecorder,\n} from '@speechmatics/browser-audio-input';\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useSyncExternalStore,\n} from 'react';\n\nexport interface IPCMAudioRecorderContext {\n  startRecording: PCMRecorder['startRecording'];\n  stopRecording: PCMRecorder['stopRecording'];\n  mute: PCMRecorder['mute'];\n  unmute: PCMRecorder['unmute'];\n  addEventListener: PCMRecorder['addEventListener'];\n  removeEventListener: PCMRecorder['removeEventListener'];\n  analyser: PCMRecorder['analyser'];\n  isRecording: PCMRecorder['isRecording'];\n  isMuted: PCMRecorder['isMuted'];\n}\n\nconst context = createContext<IPCMAudioRecorderContext | null>(null);\n\nexport function usePCMAudioRecorder() {\n  const ctx = useContext(context);\n  if (!ctx) {\n    throw new Error('PCM audio recorder context must be provided');\n  }\n\n  return ctx;\n}\n\nexport function PCMAudioRecorderProvider({\n  workletScriptURL,\n  children,\n}: {\n  workletScriptURL: string;\n  children: React.ReactNode;\n}) {\n  const recorder = useMemo(\n    () => new PCMRecorder(workletScriptURL),\n    [workletScriptURL],\n  );\n\n  useEffect(() => {\n    return () => recorder.stopRecording();\n  }, [recorder]);\n\n  const startRecording = useCallback<PCMRecorder['startRecording']>(\n    (options) => recorder.startRecording(options),\n    [recorder],\n  );\n\n  const stopRecording = useCallback<PCMRecorder['stopRecording']>(\n    () => recorder.stopRecording(),\n    [recorder],\n  );\n\n  const addEventListener = useCallback<PCMRecorder['addEventListener']>(\n    (type, listener) => recorder.addEventListener(type, listener),\n    [recorder],\n  );\n\n  const removeEventListener = useCallback<PCMRecorder['removeEventListener']>(\n    (type, listener) => recorder.removeEventListener(type, listener),\n    [recorder],\n  );\n\n  const analyser = useSyncExternalStore(\n    (onChange: () => void) => {\n      recorder.addEventListener('recordingStarted', onChange);\n      recorder.addEventListener('recordingStopped', onChange);\n\n      return () => {\n        recorder.removeEventListener('recordingStarted', onChange);\n        recorder.removeEventListener('recordingStopped', onChange);\n      };\n    },\n    () => recorder.analyser,\n    () => recorder.analyser,\n  );\n\n  const isRecording = useSyncExternalStore(\n    (onChange: () => void) => {\n      recorder.addEventListener('recordingStarted', onChange);\n      recorder.addEventListener('recordingStopped', onChange);\n\n      return () => {\n        recorder.removeEventListener('recordingStarted', onChange);\n        recorder.removeEventListener('recordingStopped', onChange);\n      };\n    },\n    () => recorder.isRecording,\n    () => recorder.isRecording,\n  );\n\n  const mute = useCallback<PCMRecorder['mute']>(\n    () => recorder.mute(),\n    [recorder],\n  );\n\n  const unmute = useCallback<PCMRecorder['unmute']>(\n    () => recorder.unmute(),\n    [recorder],\n  );\n\n  const isMuted = useSyncExternalStore(\n    (onChange) => {\n      recorder.addEventListener('mute', onChange);\n      recorder.addEventListener('unmute', onChange);\n      return () => {\n        recorder.removeEventListener('mute', onChange);\n        recorder.removeEventListener('unmute', onChange);\n      };\n    },\n    () => recorder.isMuted,\n    () => recorder.isMuted,\n  );\n\n  const value = useMemo(\n    () => ({\n      startRecording,\n      stopRecording,\n      mute,\n      unmute,\n      isMuted,\n      addEventListener,\n      removeEventListener,\n      analyser,\n      isRecording,\n    }),\n    [\n      startRecording,\n      stopRecording,\n      mute,\n      unmute,\n      isMuted,\n      addEventListener,\n      removeEventListener,\n      analyser,\n      isRecording,\n    ],\n  );\n\n  return <context.Provider value={value}>{children}</context.Provider>;\n}\n\nexport function usePCMAudioListener(cb: (audio: Float32Array) => void) {\n  const ctx = useContext(context);\n  if (!ctx) {\n    throw new Error('PCM audio recorder context must be provided');\n  }\n\n  const { addEventListener, removeEventListener } = ctx;\n\n  useEffect(() => {\n    const onAudio = (ev: InputAudioEvent) => {\n      cb(ev.data);\n    };\n\n    addEventListener('audio', onAudio);\n\n    return () => {\n      removeEventListener('audio', onAudio);\n    };\n  }, [addEventListener, removeEventListener, cb]);\n}\n"],"names":[],"mappings":"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"}