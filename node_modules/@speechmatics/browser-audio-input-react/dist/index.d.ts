import * as react_jsx_runtime from 'react/jsx-runtime';
import { PCMRecorder } from '@speechmatics/browser-audio-input';

type AudioDevices = {
    permissionState: 'prompt';
    promptPermissions: () => void;
} | {
    permissionState: 'prompting';
} | {
    permissionState: 'granted';
    deviceList: ReadonlyArray<MediaDeviceInfo>;
} | {
    permissionState: 'denied';
};
declare function useAudioDevices(): AudioDevices;

interface IPCMAudioRecorderContext {
    startRecording: PCMRecorder['startRecording'];
    stopRecording: PCMRecorder['stopRecording'];
    mute: PCMRecorder['mute'];
    unmute: PCMRecorder['unmute'];
    addEventListener: PCMRecorder['addEventListener'];
    removeEventListener: PCMRecorder['removeEventListener'];
    analyser: PCMRecorder['analyser'];
    isRecording: PCMRecorder['isRecording'];
    isMuted: PCMRecorder['isMuted'];
}
declare function usePCMAudioRecorder(): IPCMAudioRecorderContext;
declare function PCMAudioRecorderProvider({ workletScriptURL, children, }: {
    workletScriptURL: string;
    children: React.ReactNode;
}): react_jsx_runtime.JSX.Element;
declare function usePCMAudioListener(cb: (audio: Float32Array) => void): void;

export { type AudioDevices, type IPCMAudioRecorderContext, PCMAudioRecorderProvider, useAudioDevices, usePCMAudioListener, usePCMAudioRecorder };
